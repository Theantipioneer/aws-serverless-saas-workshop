# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
    Serverless SaaS Reference Architecture

Globals:
    Function:
        Timeout: 29
        Layers:
            - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
        Environment:
            Variables:
                LOG_LEVEL: DEBUG
                POWERTOOLS_METRICS_NAMESPACE: "ServerlessSaaS"

Parameters:
    StageName:
        Type: String
        Default: "prod"
        Description: "Stage Name for the api"
Resources:
    S3Bucket:
        Type: AWS::S3::Bucket
        DependsOn: 
            - AnalyseExpenseFunction
        Properties:
            BucketName: !Join [ '-', [ !Ref AWS::StackName, !Ref AWS::Region, !Ref AWS::AccountId ] ]
            
    ServerlessSaaSLayers:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: serverless-saas-dependencies-pooled
            Description: Utilities for project
            ContentUri: layers/
            CompatibleRuntimes:
                - python3.9
            LicenseInfo: "MIT"
            RetentionPolicy: Retain
        Metadata:
            BuildMethod: python3.9
    DocumentTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: shardId
                  AttributeType: S
                - AttributeName: documentId
                  AttributeType: S
            KeySchema:
                - AttributeName: shardId
                  KeyType: HASH
                - AttributeName: documentId
                  KeyType: RANGE
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
            TableName: Document-pooled
    ExpenseAsyncTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: jobId
                  AttributeType: S
            KeySchema:
                - AttributeName: jobId
                  KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
            TableName: AnalyseExpenseAsync-pooled
    
    DocumentFunctionExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: pooled-document-function-execution-role
            Path: "/"
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
            Policies:
                - PolicyName: pooled-document-function-policy
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:GetItem
                                - dynamodb:UpdateItem
                                - dynamodb:PutItem
                                - dynamodb:DeleteItem
                                - dynamodb:Query
                            Resource:
                                - !GetAtt DocumentTable.Arn
    PollingExpenseExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: pooled-polling-function-execution-role
            Path: "/"
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
            Policies:
                - PolicyName: pooled-polling-function-policy-5123
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:GetItem
                            Resource:
                                - !GetAtt ExpenseAsyncTable.Arn
                          - Effect: Allow
                            Action:
                                - s3:ListBucket
                                - s3:GetObject
                            Resource:
                                - !Sub arn:aws:s3:::${S3Bucket}
                                - !Sub arn:aws:s3:::${S3Bucket}/*
    
    SNSExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: stack-pooled-sns-execution-role
            Path: "/"
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - textract.amazonaws.com
                      Action:
                          - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonTextractServiceRole
                - arn:aws:iam::aws:policy/AmazonSNSFullAccess
    
    UploadExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: stack-pooled-upload-execution-role-559900
            Path: "/"
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
            Policies:
                - PolicyName: upload-policy-559900
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:PutObject
                                - s3:GetObject
                                - s3:ListBucket
                            Resource:
                                - !Sub arn:aws:s3:::${S3Bucket}
                                - !Sub arn:aws:s3:::${S3Bucket}/*
                          - Effect: Allow
                            Action:
                                - lambda:InvokeFunction
                            Resource:
                                - !GetAtt AnalyseExpenseFunction.Arn
                          
    AnalyseExpenseExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: stack-pooled-analyse-expense-execution-role
            Path: "/"
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
                - arn:aws:iam::aws:policy/AmazonTextractFullAccess

    AnalyseExpenseS3Policy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: stack-pooled-analyse-expense-s3-policy
            Roles:
                - !Ref AnalyseExpenseExecutionRole
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - s3:PutObject
                          - s3:GetObject
                          - dynamodb:UpdateItem
                      Resource:
                          - !Sub arn:aws:s3:::${S3Bucket}
                          - !Sub arn:aws:s3:::${S3Bucket}/*
                          - !GetAtt ExpenseAsyncTable.Arn

    GetDocumentFunction:
        Type: AWS::Serverless::Function
        DependsOn: DocumentFunctionExecutionRole
        Properties:
            CodeUri: DocumentService/
            Handler: document_service.get_document
            Runtime: python3.9
            Tracing: Active
            Role: !GetAtt DocumentFunctionExecutionRole.Arn
            Layers:
                - !Ref ServerlessSaaSLayers
            Environment:
                Variables:
                    POWERTOOLS_SERVICE_NAME: "DocumentService"
                    DOCUMENT_TABLE_NAME: !Ref DocumentTable

    GetDocumentsFunction:
        Type: AWS::Serverless::Function
        DependsOn: DocumentFunctionExecutionRole
        Properties:
            CodeUri: DocumentService/
            Handler: document_service.get_documents
            Runtime: python3.9
            Tracing: Active
            Role: !GetAtt DocumentFunctionExecutionRole.Arn
            Layers:
                - !Ref ServerlessSaaSLayers
            Environment:
                Variables:
                    POWERTOOLS_SERVICE_NAME: "DocumentService"
                    DOCUMENT_TABLE_NAME: !Ref DocumentTable

    CreateDocumentFunction:
        Type: AWS::Serverless::Function
        DependsOn: DocumentFunctionExecutionRole
        Properties:
            CodeUri: DocumentService/
            Handler: document_service.create_document
            Runtime: python3.9
            Tracing: Active
            Role: !GetAtt DocumentFunctionExecutionRole.Arn
            Layers:
                - !Ref ServerlessSaaSLayers
            Environment:
                Variables:
                    POWERTOOLS_SERVICE_NAME: "DocumentService"
                    DOCUMENT_TABLE_NAME: !Ref DocumentTable

    UpdateDocumentFunction:
        Type: AWS::Serverless::Function
        DependsOn: DocumentFunctionExecutionRole
        Properties:
            CodeUri: DocumentService/
            Handler: document_service.update_document
            Runtime: python3.9
            Tracing: Active
            Role: !GetAtt DocumentFunctionExecutionRole.Arn
            Layers:
                - !Ref ServerlessSaaSLayers
            Environment:
                Variables:
                    POWERTOOLS_SERVICE_NAME: "DocumentService"
                    DOCUMENT_TABLE_NAME: !Ref DocumentTable

    DeleteDocumentFunction:
        Type: AWS::Serverless::Function
        DependsOn: DocumentFunctionExecutionRole
        Properties:
            CodeUri: DocumentService/
            Handler: document_service.delete_document
            Runtime: python3.9
            Tracing: Active
            Role: !GetAtt DocumentFunctionExecutionRole.Arn
            Layers:
                - !Ref ServerlessSaaSLayers
            Environment:
                Variables:
                    POWERTOOLS_SERVICE_NAME: "DocumentService"
                    DOCUMENT_TABLE_NAME: !Ref DocumentTable
    
    AnalyseExpenseFunction:
        Type: AWS::Serverless::Function
        DependsOn: AnalyseExpenseExecutionRole
        Properties:
            CodeUri: Textract/
            Handler: analyse_expense.lambda_handler
            Runtime: python3.9
            Timeout: 180
            MemorySize: 512
            Tracing: Active
            Role: !GetAtt AnalyseExpenseExecutionRole.Arn
            Layers:
                - !Ref ServerlessSaaSLayers
                # - !Sub "arn:aws:lambda:${AWS::Region}:625075209381:layer:analyse-expense:1"
                - !Sub "arn:aws:lambda:${AWS::Region}:625075209381:layer:poppler_light:5"
            Environment:
                Variables:
                    OUTPUT_BUCKET_NAME: !Join [ '-', [ !Ref AWS::StackName, !Ref AWS::Region, !Ref AWS::AccountId ] ]
                    OUTPUT_S3_PREFIX: 'textract-output'
                    PREFIX: "postprocess"
                    SNS_TOPIC_ARN: !Ref SNSTopic
                    SNS_ROLE_ARN: !GetAtt SNSExecutionRole.Arn
    
    UploadFunction:
        Type: AWS::Serverless::Function
        DependsOn: UploadExecutionRole
        Properties:
            CodeUri: S3/
            Handler: upload.lambda_handler
            Runtime: python3.9
            MemorySize: 512
            Timeout: 360
            Tracing: Active
            Role: !GetAtt UploadExecutionRole.Arn
            Layers:
                - !Ref ServerlessSaaSLayers
            Environment:
                Variables:
                    ANALYSE_EXPENSE_FUNCTION: !Ref AnalyseExpenseFunction
                    BUCKET_NAME: !Ref S3Bucket
                   
    GetExpenseAnalysisFunction:
        Type: AWS::Serverless::Function
        DependsOn: AnalyseExpenseExecutionRole
        Properties:
            CodeUri: Textract/
            Handler: get_expense_analysis.lambda_handler
            Runtime: python3.9
            Timeout: 180
            MemorySize: 512
            Tracing: Active
            Role: !GetAtt AnalyseExpenseExecutionRole.Arn
            Layers:
                - !Ref ServerlessSaaSLayers
                - !Sub "arn:aws:lambda:${AWS::Region}:625075209381:layer:poppler_light:5"
            Environment:
                Variables:
                    BUCKET_NAME: !Join [ '-', [ !Ref AWS::StackName, !Ref AWS::Region, !Ref AWS::AccountId ] ]
                    PREFIX: "postprocess"
                    ASYNCHRONOUS_EXPENSE_TABLE: !Ref ExpenseAsyncTable
    
    SNSTopic:
        Type: AWS::SNS::Topic
        DependsOn: 
            - GetExpenseAnalysisFunction
        Properties:
            Subscription:
                - Protocol: lambda
                  Endpoint: !GetAtt GetExpenseAnalysisFunction.Arn                
    
    BusinessServicesAuthorizerFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: Resources/
            Handler: tenant_authorizer.lambda_handler
            Runtime: python3.9
            Role: !ImportValue Acumen-SaaS-AuthorizerExecutionRoleArn
            MemorySize: 256
            Tracing: Active
            Layers:
                - !Ref ServerlessSaaSLayers
            Environment:
                Variables:
                    TENANT_USER_POOL: !ImportValue Acumen-SaaS-CognitoTenantUserPoolId
                    TENANT_APP_CLIENT: !ImportValue Acumen-SaaS-CognitoTenantAppClientId
    
    ApiGatewayAccessLogs:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: /aws/api-gateway/access-logs-acumen-saas-tenant-api-pooled
            RetentionInDays: 30
    ApiGatewayTenantApi:
        Type: AWS::Serverless::Api
        Properties:
            MethodSettings:
                - DataTraceEnabled: False
                  LoggingLevel: INFO
                  MetricsEnabled: True
                  ResourcePath: "/*"
                  HttpMethod: "*"
            AccessLogSetting:
                DestinationArn: !GetAtt ApiGatewayAccessLogs.Arn
                Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
            TracingEnabled: True
            DefinitionBody:
                openapi: 3.0.1
                info:
                    title: "pooled-acumen-saas-tenant-api"
                basePath: !Join ["", ["/", !Ref StageName]]
                x-amazon-apigateway-api-key-source: "AUTHORIZER"
                schemes:
                    - https
                paths:
                    /document/{id}:
                        get:
                            summary: Returns a document
                            description: Return a document by a document id.
                            produces:
                                - application/json
                            parameters:
                                - name: id
                                  in: path
                                  required: true
                                  type: string
                            responses: {}
                            security:
                                - Authorizer: []
                            x-amazon-apigateway-integration:
                                uri: !Join
                                    - ""
                                    - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                                      - !GetAtt GetDocumentFunction.Arn
                                      - /invocations
                                httpMethod: POST
                                type: aws_proxy
                        put:
                            produces:
                                - application/json
                            responses: {}
                            security:
                                - Authorizer: []
                            x-amazon-apigateway-integration:
                                uri: !Join
                                    - ""
                                    - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                                      - !GetAtt UpdateDocumentFunction.Arn
                                      - /invocations
                                httpMethod: POST
                                type: aws_proxy
                        delete:
                            summary: Deletes a document
                            description: Deletes a document by a document id.
                            produces:
                                - application/json
                            parameters:
                                - name: id
                                  in: path
                                  required: true
                                  type: string
                            responses: {}
                            security:
                                - Authorizer: []
                            x-amazon-apigateway-integration:
                                uri: !Join
                                    - ""
                                    - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                                      - !GetAtt DeleteDocumentFunction.Arn
                                      - /invocations
                                httpMethod: POST
                                type: aws_proxy
                        options:
                            consumes:
                                - application/json
                            produces:
                                - application/json
                            responses:
                                "200":
                                    description: 200 response
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: string
                                        Access-Control-Allow-Methods:
                                            type: string
                                        Access-Control-Allow-Headers:
                                            type: string
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: 200
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                passthroughBehavior: when_no_match
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                type: mock
                    /documents:
                        get:
                            summary: Returns all documents
                            description: Returns all documents.
                            produces:
                                - application/json
                            responses: {}
                            security:
                                - Authorizer: []
                            x-amazon-apigateway-integration:
                                uri: !Join
                                    - ""
                                    - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                                      - !GetAtt GetDocumentsFunction.Arn
                                      - /invocations
                                httpMethod: POST
                                type: aws_proxy
                        options:
                            consumes:
                                - application/json
                            produces:
                                - application/json
                            responses:
                                "200":
                                    description: 200 response
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: string
                                        Access-Control-Allow-Methods:
                                            type: string
                                        Access-Control-Allow-Headers:
                                            type: string
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: 200
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                passthroughBehavior: when_no_match
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                type: mock
                    /document:
                        post:
                            produces:
                                - application/json
                            responses: {}
                            security:
                                - Authorizer: []
                            x-amazon-apigateway-integration:
                                uri: !Join
                                    - ""
                                    - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                                      - !GetAtt CreateDocumentFunction.Arn
                                      - /invocations
                                httpMethod: POST
                                type: aws_proxy
                        options:
                            consumes:
                                - application/json
                            produces:
                                - application/json
                            responses:
                                "200":
                                    description: 200 response
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: string
                                        Access-Control-Allow-Methods:
                                            type: string
                                        Access-Control-Allow-Headers:
                                            type: string
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: 200
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                passthroughBehavior: when_no_match
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                type: mock
                
                    /upload:
                        post:
                            produces:
                                - application/json
                            responses: {}
                            security:
                                - Authorizer: []
                            x-amazon-apigateway-integration:
                                uri: !Join
                                    - ""
                                    - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                                      - !GetAtt UploadFunction.Arn
                                      - /invocations
                                httpMethod: POST
                                type: aws_proxy
                        options:
                            consumes:
                                - application/json
                            produces:
                                - application/json
                            responses:
                                "200":
                                    description: 200 response
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: string
                                        Access-Control-Allow-Methods:
                                            type: string
                                        Access-Control-Allow-Headers:
                                            type: string
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: 200
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                passthroughBehavior: when_no_match
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                type: mock
                    /job/{jobId}:
                        get:
                            produces:
                                - application/json
                            parameters:
                                - name: jobId
                                  in: path
                                  required: true
                                  type: string
                            responses: {}
                            security:
                                - Authorizer: []
                            x-amazon-apigateway-integration:
                                uri: !Join
                                    - ""
                                    - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                                      - !GetAtt PollingExpenseFunction.Arn
                                      - /invocations
                                httpMethod: POST
                                type: aws_proxy
                        options:
                            consumes:
                                - application/json
                            produces:
                                - application/json
                            responses:
                                "200":
                                    description: 200 response
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: string
                                        Access-Control-Allow-Methods:
                                            type: string
                                        Access-Control-Allow-Headers:
                                            type: string
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: 200
                                        responseParameters:
                                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                                            method.response.header.Access-Control-Allow-Origin: "'*'"
                                passthroughBehavior: when_no_match
                                requestTemplates:
                                    application/json: '{"statusCode": 200}'
                                type: mock
                components:
                    securitySchemes:
                        Authorizer:
                            type: "apiKey"
                            name: "Authorization"
                            in: "header"
                            x-amazon-apigateway-authtype: "custom"
                            x-amazon-apigateway-authorizer:
                                authorizerUri: !Join
                                    - ""
                                    - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                                      - !GetAtt BusinessServicesAuthorizerFunction.Arn
                                      - /invocations
                                authorizerResultTtlInSeconds: 30
                                type: "token"
            StageName: !Ref StageName
            
    S3InvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        DependsOn: 
            - AnalyseExpenseFunction
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref AnalyseExpenseFunction
            Principal: lambda.amazonaws.com
            
    SNSInvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        DependsOn: 
            - GetExpenseAnalysisFunction
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt GetExpenseAnalysisFunction.Arn
            Principal: sns.amazonaws.com
    
    GetDocumentsLambdaApiGatewayExecutionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt GetDocumentsFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn:
                !Join [
                    "",
                    [
                        "arn:aws:execute-api:",
                        { "Ref": "AWS::Region" },
                        ":",
                        { "Ref": "AWS::AccountId" },
                        ":",
                        !Ref ApiGatewayTenantApi,
                        "/*/*/*",
                    ],
                ]
    GetDocumentLambdaApiGatewayExecutionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt
                - GetDocumentFunction
                - Arn
            Principal: apigateway.amazonaws.com
            SourceArn:
                !Join [
                    "",
                    [
                        "arn:aws:execute-api:",
                        { "Ref": "AWS::Region" },
                        ":",
                        { "Ref": "AWS::AccountId" },
                        ":",
                        !Ref ApiGatewayTenantApi,
                        "/*/*/*",
                    ],
                ]
    CreateDocumentLambdaApiGatewayExecutionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt
                - CreateDocumentFunction
                - Arn
            Principal: apigateway.amazonaws.com
            SourceArn:
                !Join [
                    "",
                    [
                        "arn:aws:execute-api:",
                        { "Ref": "AWS::Region" },
                        ":",
                        { "Ref": "AWS::AccountId" },
                        ":",
                        !Ref ApiGatewayTenantApi,
                        "/*/*/*",
                    ],
                ]
    UpdateDocumentLambdaApiGatewayExecutionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt
                - UpdateDocumentFunction
                - Arn
            Principal: apigateway.amazonaws.com
            SourceArn:
                !Join [
                    "",
                    [
                        "arn:aws:execute-api:",
                        { "Ref": "AWS::Region" },
                        ":",
                        { "Ref": "AWS::AccountId" },
                        ":",
                        !Ref ApiGatewayTenantApi,
                        "/*/*/*",
                    ],
                ]
    DeleteDocumentLambdaApiGatewayExecutionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt
                - DeleteDocumentFunction
                - Arn
            Principal: apigateway.amazonaws.com
            SourceArn:
                !Join [
                    "",
                    [
                        "arn:aws:execute-api:",
                        { "Ref": "AWS::Region" },
                        ":",
                        { "Ref": "AWS::AccountId" },
                        ":",
                        !Ref ApiGatewayTenantApi,
                        "/*/*/*",
                    ],
                ]
    UploadLambdaApiGatewayExecutionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt UploadFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn:
                !Join [
                    "",
                    [
                        "arn:aws:execute-api:",
                        { "Ref": "AWS::Region" },
                        ":",
                        { "Ref": "AWS::AccountId" },
                        ":",
                        !Ref ApiGatewayTenantApi,
                        "/*/*/*",
                    ],
                ]
    AuthorizerLambdaApiGatewayExecutionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt BusinessServicesAuthorizerFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn:
                !Join [
                    "",
                    [
                        "arn:aws:execute-api:",
                        !Ref "AWS::Region",
                        ":",
                        !Ref "AWS::AccountId",
                        ":",
                        !Ref ApiGatewayTenantApi,
                        "/*/*",
                    ],
                ]
    
Outputs:
    TenantApiGatewayId:
        Description: Id for Tenant API Gateway
        Value: !Ref ApiGatewayTenantApi
    TenantAPI:
        Description: "API Gateway endpoint URL for Tenant API"
        Value:
            !Join [
                "",
                [
                    !Sub "https://${ApiGatewayTenantApi}.execute-api.${AWS::Region}.amazonaws.com/",
                    !Ref StageName,
                ],
            ]
